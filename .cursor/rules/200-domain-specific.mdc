---
description: Business-rules cheat-sheet
globs:
  - "domain/**/*.py"
alwaysApply: false
---

# Domain-Specific Business Rules

When working in the domain layer, enforce these critical business invariants:

## Core Business Rules

### Customer-Segment Relationship
- Customer â†” Segment = 1-to-1 relationship
- A customer belongs to exactly one segment
- Segments are mutually exclusive

### Monetary Values
- Money uses `Decimal`, never `float`
- Import: `from decimal import Decimal`
- Example: `price = Decimal('19.99')`
- Always use string input to Decimal to avoid float precision issues

### Data Persistence
- All writes go through `services/unit_of_work.py`
- Never write directly to database from domain layer
- Use repository pattern for data access

## Domain Layer Guidelines

### Entity Rules
```python
# domain/entities/customer.py
from decimal import Decimal
from typing import Optional

class Customer:
    def __init__(self, id: str, segment: Segment):
        self.id = id
        self.segment = segment  # 1-to-1 with Segment
        self.balance = Decimal('0.00')  # Never use float
```

### Service Layer Pattern
```python
# services/customer_service.py
from services.unit_of_work import UnitOfWork

def update_customer_balance(customer_id: str, amount: Decimal, uow: UnitOfWork):
    with uow:
        customer = uow.customers.get(customer_id)
        customer.balance += amount
        uow.commit()  # All writes through UoW
```

### Value Objects
- Immutable objects for domain concepts
- Examples: Money, Address, Email
- Implement `__eq__` and `__hash__` for value objects

## Architecture Rules
1. Domain objects have no dependencies on infrastructure
2. Business logic stays in domain layer
3. Use dependency injection for external services
4. Domain events for cross-aggregate communication
